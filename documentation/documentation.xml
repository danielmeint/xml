<?xml version="1.0" encoding="UTF-8"?>

<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.1">
    <info>
        <title>XForms Blackjack documentation</title>
        <author>
            <personname>Daniel Meint</personname>
            <email>d.meint@tum.de</email>
        </author>
        <author>
            <personname>Felix Hennerkes</personname>
            <email>ga38hom@mytum.de</email>
        </author>
        <author>
            <personname>Janik Schnellbach</personname>
            <email>janik.schnellbach@tum.de</email>
        </author>
        <author>
            <personname>Maximilian Karpfinger</personname>
            <email>maximilian.karpfinger@tum.de</email>
        </author>
        <orgname>Technical University of Munich (TUM)</orgname>
    </info>
    <section>
        <title>The component model</title>
        <section>
            <title>Modeling the model</title>
            <para>
                In a MVC-architecture the model has the control of the application's logic. 
                Furthermore it is resposibel to store data in a database.
                In order to maintain data, several objects with unique functionality are needed.
                All these collaborating objects provide different attributes and methods. In the following the data model will be described at first.
                Thereon the design decisions will be discussed. The second part consists of the implementation of the game, followed by a discussion on
                implementation details and what problems were faced.
            </para>
            <para>
                The database consists of a list of games. For that a class <classname>game</classname> is needed 
                which stores every information about the instance of a blackjack game. A game object has multiple attributes and functions.
                <itemizedlist>
                    <listitem>
                        <para><code>id</code> to distinguish games</para>
                    </listitem>
                    <listitem>
                        <para><code>state</code> stores the state of the game</para>
                    </listitem>
                </itemizedlist>
                Regarding <classname>game</classname> functions, their main purpose is constructing,initializing and resetting game objects.
                Because every game object also stores all the attending players and a dealer, the functions essentially execute operations on all players.
                In addition to the basic functions, <classname>game</classname> provides the function <function>evaluate</function>. 
                However the logic of evaluating a player is sourced to the <classname>player</classname> class. 
                Another object stored in a game object is the chat.
            </para>
            <para>
                The <classname>player</classname> has the following attributes.
                <itemizedlist>
                    <listitem>
                        <para><code>name</code> stores name of the player</para>
                    </listitem>
                    <listitem>
                        <para><code>state</code> stores the state of the player</para>
                    </listitem>
                    <listitem>
                        <para><code>insurance</code> stores wether or not a player chose to take insurance</para>
                    </listitem>
                    <listitem>                     
                        <para><code>balance</code> stores the total balance of a player</para>
                    </listitem>
                    <listitem>
                        <para><code>bet</code> stores the player's bet in a round</para>
                    </listitem>
                    <listitem>
                        <para><code>profit</code> stores the player's profit in a round</para>
                    </listitem>
                </itemizedlist>
                Another object stored inside the player is the players hand, which holds the cards.
                As to the <classname>player</classname> functions, contiguous to the constructors and setters,
                there are alot of functions that contain the game's logic. Depending on the game's state, a player can 
                take several actions, which are passed over to the <classname>player</classname> class by the API.
                Following functions are supplied.
                <itemizedlist>
                    <listitem>
                        <para><function>hit</function> draws another card for the player</para>
                    </listitem>
                    <listitem>
                        <para><function>stand</function> the player doesn't want more cards</para>
                    </listitem>
                    <listitem>
                        <para><function>double</function> doubles the player's bet and draws one last card</para>
                    </listitem>
                    <listitem>
                        <para><function>insurance</function> the player takes insurance</para>
                    </listitem>
                    <listitem>
                        <para><function>evaluate</function> determines the player's profit</para>
                    </listitem>
                </itemizedlist>
                Alongside the listed functions there are some helpers, which provide logic for finding the next player and joining or leaving a game.
            </para>
            <para>
                Since the players all play against the dealer, another class <classname>dealer</classname> is required.
                It has no attributes, but it stores the deck of the game and likewise the players a hand object.
                Concerning the functions of the class, <function>evaluateInsurance</function> is a helper for evaluating a players profit.
                The function <function>deal</function> gives every player two cards and also draws for the dealer.
            </para>
            <para>
                The <classname>hand</classname> class has the attribute <code>value</code> which stores the value of the contained cards.
                On one hand this class provides helper functions for evaluating a player's hand. On the other hand it supplies the <function>getOptimalSum</function> 
                function that calculates the optimal sum of a hand. This is needed because the card Ace can have the value 1 and 11.
            </para>
            <para>
                The <classname>card</classname> class consists of two attributes.
                <itemizedlist>
                    <listitem>
                        <para><code>value</code> stores the value of a card</para>
                    </listitem>
                    <listitem>
                        <para><code>suit</code> stores the suit of a card</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Design decisions and discussion</title>
            <para>
                why we chose to have object hand
            </para>
            <para>
                why we have usr and player
            </para>
        </section>
        <section>
            <title>Implementation</title>
            <para>deck is real not generating random cards</para>
            <para>optimal sum recursive</para>
        </section>
        <section>
            <title>Implementation decisions and discussion</title>
            <para>dealer drawing at first</para>
            <para>profit for front end</para>
            <para>how to deal with broke players</para>
            <para>
                problem of trying to replace node multiple time -> work around
            </para>
            <para>
                double and bust call next() -> problem of evaluate data not in db if it was last player     
            </para>
        </section>
    </section>
</article>
